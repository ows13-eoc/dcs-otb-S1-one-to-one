#!/opt/anaconda/bin/python

import sys
import os
import lxml.etree as et
import shutil
import tarfile
import atexit
import glob

sys.path.append('/opt/anaconda/bin/')
import cioppy
ciop = cioppy.Cioppy()

sys.path.append(os.environ['_CIOP_APPLICATION_PATH'] + '/otbhelpers')
import otbhelpers as oh

sys.path.append('/opt/OTB/lib/python')
sys.path.append('/opt/OTB/lib/libfftw3.so.3')
os.environ['OTB_APPLICATION_PATH'] = '/opt/OTB/lib/otb/applications'
os.environ['LD_LIBRARY_PATH'] = '/opt/OTB/lib'
os.environ['ITK_AUTOLOAD_PATH'] = '/opt/OTB/lib/otb/applications'
import otbApplication

# define the exit codes
SUCCESS = 0
ERR_RESOLUTION = 10
ERR_STAGEIN = 20
ERR_EXTRACT = 30
ERR_NO_OUTPUT = 40 
ERR_NO_S1 = 50

# add a trap to exit gracefully
def clean_exit(exit_code):
    log_level = 'INFO'
    if exit_code != SUCCESS:
        log_level = 'ERROR'  
   
    msg = {SUCCESS: 'Processing successfully concluded',
           ERR_RESOLUTION: 'Could not resolve Landsat-8 product enclosure',
           ERR_STAGEIN: 'Could not stage-in Landsat-8 product',
           ERR_EXTRACT: 'Failed to extract Landsat-8 product',
           ERR_NO_OUTPUT: "OTB failed to produce output",
           ERR_NO_S1: "Could not find Sentinel-1 data with swath and polarisation provided"    
    }
 
    ciop.log(log_level, msg[exit_code])  

def process(s1_prd, s1_out_prd, lut = "lut sigma"):

    ciop.log('INFO', 'Process in-memory OTB applications')

    # orchestrate the OTB applications
    OTB_app1 = otbApplication.Registry.CreateApplication('SARDeburst')
    OTB_app1.SetParameterString('in', s1_prd)
    OTB_app1.SetParameterString('out', os.path.join(ciop.tmp_dir, 'sardeburst.tiff'))
    OTB_app1.ExecuteAndWriteOutput()

    OTB_app2 = otbApplication.Registry.CreateApplication('SARCalibration')
    OTB_app2.SetParameterString('in', os.path.join(ciop.tmp_dir, 'sardeburst.tiff'))
    OTB_app2.SetParameterString('out', s1_out_prd)
    OTB_app2.SetParameterString('lut', lut)
    OTB_app2.ExecuteAndWriteOutput()
 
    os.remove(os.path.join(ciop.tmp_dir, sardeburst.tiff))
 

def main():

    os.chdir(ciop.tmp_dir)

    polarisation = ciop.getparam('polarisation').lower()
    swath = ciop.getparam('swath').lower()
    lut = ciop.getparam('lut')

    # Loops over all the inputs
    for inputfile in sys.stdin:
      # report activity in log
      ciop.log('INFO', 'The input file is: ' + inputfile)

      search = ciop.search(end_point = inputfile, params = [], output_fields='enclosure,identifier', model='GeoTime')
      assert(search), sys.exit(ERR_RESOLUTION)

      ciop.log('INFO', 'Retrieve %s from %s' % (search[0]['identifier'], search[0]['enclosure']))
      retrieved = ciop.copy(search[0]['enclosure'], ciop.tmp_dir)
      assert(retrieved), sys.exit(ERR_STAGEIN)

      search_expression = os.path.join(ciop.tmp_dir, str(search[0]['identifier']), str(search[0]['identifier']) + '.SAFE', 'measurement', 's1?-' + swath + '-slc-*' + polarisation + '*.tiff')
      ciop.log('INFO', 'path: ' + search_expression)

      #s1_prd = '' 
      try:
        s1_prd = glob.glob(search_expression)[0]  
      except:
        sys.exit(ERR_NO_S1)

      ciop.log('INFO', 'The input file is: ' + s1_prd) 

      s1_result_prd = os.path.join(ciop.tmp_dir, os.path.basename(s1_prd)[:-5] + '_deburst_calibrated.tiff')

      ciop.log('INFO', 'The output file is: ' + s1_result_prd)
      process(s1_prd, s1_result_prd, lut)
 
      assert(os.path.isfile(s1_result_prd)), sys.exit(ERR_NO_OUTPUT)
       
      # publish
      ciop.log('INFO', 'Publishing ' + s1_result_prd ) 
      ciop.publish(s1_result_prd, metalink=True)      
   
      # clean-up
      os.remove(s1_result_prd)
      os.rmdir(os.path.join(ciop.tmp_dir, str(search[0]['identifier'])))
try:
  main()
except SystemExit as e:
  if e.args[0]:
    clean_exit(e.args[0])
  raise
else:
  atexit.register(clean_exit, 0)

